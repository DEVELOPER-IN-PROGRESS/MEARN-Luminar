30/01/2025

1) Assignment
2) arithemtic +,-,*,/,%,**
3) Relational Operators : > , >=  , <= , == , ===
    Returns boolean values
4) Logical Operators :
    AND (&&)
    OR  (||)
    NOT (!)
    Used mostly between Relational Operators
    Returns boolean values

    AND operator return true only in the event of all statements equating to true
    OR Operator Return False only in the event that all expresssion equate to false
    NOT Operator Negates the logic state
5) Increment and Decrement Operators (++ , --)
6) Shorthand Operators
    assume x = x + y which can be shorthanded to x+= y
7) Ternary
    condition ? true statement : false statement

Conditional Statements (decision making statements)
---------------------------------------------------
1) if else
    syntax
        if(condition){

        }else{
            //statements
        }
2) switch

In js data can be inputted via the prompt method which uses a popup or we can collect user
input from HTML input box

31/01/2025
Looping Statements
    To do task repeatedly at particular position of programming file
1) while loop
        syntax:
            variable initialization
            while(condition){
                statements;
                exit condition/ increment|decrement operation
            }
2) for loop

01/02/2025
 we can convert string to number by Number() method

parseInt(),Math.floor() ,removes decimal part of number

break; keyword can forcefully break from the loop

04/02/2025
for loop
syntax:  for(variable initialization ; condition ; increment/decrement){
        // statements
    }

if we know the exact number of iterations beforehand we can prefer for loops,
and we use while loop when we can't predetermine the iterations

10/02/2025

Pattern Printing - nested loop

12/02/2025

Functions()
functions are set of instructions to do a certain operation multiple times based on condition
function has two parts 1) function definition 2)  function call

function function_name(arguments){
    Statements
}

function call = function_name()

13/02/2025

Variables inside the function has only function scope and can't be accessed outisde function

in order to access variables outside the function 'return' keyword is Used
return should be the last statement inside  a function or statements after return stement won't be executed


Arrow Functions
from ES6 version arrow functions are preferred over arrow functions

syntax:
    const variable/function_name = () => { /*
      statements */ }

if there is only single line in function there is no need for {}
and return is automatically done furthermore there is no need for return keyword explicitly

arrow functions have no functional hoisting whereas normal functions have hoisting


:: Callback Functions ::
A function calling another function is called callback .
Callback functions are passed as arguments to another function and is executed after the funtion completes its execution

:: Predefined Funcuitons ::
function that are already built into the language to make applications development
easier
egs: Math.floor(), console.log()

:: Nested Function ::
A function defined inside another function is called nested

  Closure Property
  Closure is the ability of variables inside parents function be accessible to child
  function but the variable inside the child function not being accessible to the parent
  function

Synchronous and Asynchronous
    Synchronous functions are functions which have no time delay
    Asynchronous functions will have a time delay eg: setTimeout , API Fetching


Data Structures
- a specialized format/container for storing ,processsing , retrieving , organizing data
eg: array , list , string , there

Array:
unlike variables an array can store data with 1 or more datatypes that are separatd by a comma
and enclosed by  square brackets;
format:  let arrayname = [];

object stores data in key:value pairs all enclosed by curly brackets {}.

Array Operations
-----------------

1 get - using index location
2 add - push - appends new value to end of array
3 unshift - add items to an array as first element
4  pop - delete last element from an array
5 shift - deletes frist item of an array
6 sort  - arranges the array in either ascending or descending order
            syntax:
            arr.sort((a,b)=>a-b)  // ascending order
            arr.sort((a,b)=>b-a)  // descending order
7 flat() - reduce the dimension of array by 1 eg: 2d to 1D array
         - flat(depth)  directly converts the array to whatever depth we want '
         or it handles the level of change
8 forEach() Used to access each item from an array . forEach will return new item rather than an array
9 map() - similar to forEach method but it will return new processed array after processing each
         element from an array
10 reduce() reduce method returns only a single value from the given array
        for eg: total sum , highest , lowest , average etc
11 filter()
12 find() return an element satisfying a particular condition
13 some() to check the given condition is true or false
14 splice(index,deleteCount)
15 includes( )
16 indexOf()
17 slice() - to create a a subarray from an array ::

spread operator - represented by '...'  which is used to join two arrays

Array methods like forEach traverse till the end thereby break statement dosen't work in those methods
--------------------------
1 for loop
2 'in' operator  return indices of an array
3 'of' operator return array items as such
 In javascript array is of infinite lengtrh as we don;t specify the length when we decalare
 an array


TRUTHY Operator:
If there is only an if block inside condition we can use the following syntax to executed
condition &&  statement

.git is also called staging area

Nested Array - when array is  inside another array

::STRING::
strings are a sequence of characters
startsWith

""OBJECT""
1) add -
   objectname['key']= value
2)

Procedural programming
unlike OOPS procedural programming considers data and methods as different
entities

O.O.P.S

JavaScript In Frontend

DATABASES:
- Used to Store Data
- large amount of data can be stores

- Browser Local Storage (limited storage)
    - local storage - permanently stored
    - session storage - temporary storage (data lost when tab is closed)

Operations
1) add - setItem("key","data or value") .
    to convert data into string we can use JSON.stringify()
2) retrieve - getItem("key")
    to convert the string data into actual data we use JSON.parse(<data>)
3) delete an item  - removeItem("key")
