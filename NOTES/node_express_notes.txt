MODULE V
Node and Express

MCV Architecture
M: Model
V: View
C: Controller

<MVC Architecture diagram here >
Model is the structure in which the data is defined
View the client which sends the request
Controller is a function which contains the logic to solve the request

Router : contains the path  which is meant to  resolve the request

Node
Node is a runtime environment for the javascript which can be executed outside the browser

Modules:
Modules are js files or libraries that can be used in the node.js application to provide specific functionalities. If you want to use a module in your application it should be imported.

In the backend we use the 'require' keyword in place of import.
similarly for the export we use the module.export

Types of modules
1) Built-in module
 some common built-in modules are

  1) File System modules - in order to work with the files in your computer/system
 	common Uses:
	1) Read a File - readFile()
	2) To Create a File - open()
	3) Update a file - writeFile()
	4) delete a file - unlink()
	5) rename a file - rename()

  2) HTTP Module:
    - It helps to transfer data with http
    - It can create an http server which have the ability to resolve the request - createServer()

  3) HTTPS Module:
    - can create a server which can resolve request coming in https protocol

  4) Event modules
    -

  5) Crypto Modules
    - Used to encryption and decryption


2) Custom modules


Environment Variables
It is a variable which is typically used to provide the ability to configure a value in your code
from outside of your application.
placed inside a .env file during the development phase
these files are handled using the dotenv library
// how to ensure privacy in your application ? .env is one of the method

connection string ?

Express
-------
Express is a framework of node.js

Steps to create an express server

1) create a folder for express-server/backend
2) run npm init -y command inside the backend folder
3) edit the script tag inside the package.json file in order to run the entry point
4) install the required libraries for the server side
5) we need to install a set of libraries for the backend
	- npm install express
	- npm install cors (cross origin resource sharing) - to connect with the frontend
	- npm install dotenv ( for handling the environment variables
	- npm install mongoose ( in order to create connection between the server and the database)
6) Create .gitignore file with node_modules/
7) Create index.js file
8) Create .env file to store the environment variables
9) add .env to the .gitignore file
10) create server in index.js
	- express 
	- listening port for the server
	- listen to the port
11) use cors to connect the server with the frontend (cors())
12) parsing the json data through a middleware with express.json()
13) create router file (a.k.a routes.js ) in the backend which handles all the incoming requests 
14) create a controller to handle the logic (new folder )
15) 

cors (cross origin resource sharing ) - the backend and the frontend will be in separate locations or 
domains and inorder to share data between different domains we will have to connect these , and this connection 
can be achieved via cors library . 

29/04/2025
RECORD LOGS
----- --- -- 
imported cors and stored it into a variable (bookServer.use(cors()))

inorder to parse the data in between we use a middleware inside the express 
which is done using  bookServer.use(express.json()) as json is a common standard format for 
sharing data between different programming languages 

now that we have set up our middleware we need to channelize the incoming requests which can be converted 
into logical operations  so inorder to do that we use/create routes.js file 

we create the routes using the router class which is predefined inside the express library 
const route = new express.Router()

firstly we are setting route for the register functionality 
since we are posting the data we use route.post( path , <controller_logic> ) instead of route.get() 

inorder for the server to use our routes we need to export it which can be done using 
module.exports = route

inside the index.js import the route from the routes file 

we have now created a path for the requests now we need the do the logic which is done using the controller part
so create a folder for the controllers and a userController.js file for now which handles the registration 

exports.registerController = (req,res) => {
  //TODO: logic 
} 

import userController inside the routes file at the top 
import userController = require('./controllers/userController') ;

inside the register route use the controller using the format... 
route.post('/register' ,userController.registerController) 

if we place the routes before parsing inside the index.js we would be handling the json data which would result in an error so the order must be followed speicifically i.e  cors(), express.json() for parsing , route  for 
chanelizing the request 

now we are passing the register details to the controller via thunderclient using a POST request (username, email , password) 

once the request is broken down and the data is received in the console we need to check whether the data existsinside the database and hence we are introducing ... ... MongoDB


MODULE 4  - MONGODB
--Database: 
 database is used to organize a collection of data that are stored and managed in such a way
 that it makes easy to retrieve update and manupulate data queries 

--database can be classified into 
1) SQL - Structured Query Language
2) NoSQL _ Not Only Structured Query Language 

sql 					nosql
-------				    ------------
- relational database              -  non relational , 
- table like format		   - need not be a table like structure ( eg: graphs , documents , column key:value)
- rigid schema (structure)         - not rigid and hence a flexible schema 
- suitable for financial and       - used in real time applications , 
  banking application or 
 for small amount of data 
- eg MYSqL , postgreSQL , SQlite   - eg: mongodb(document) ,redis, cassandra(column wise) , neo4j 


MONGO DB
In mongoDB data is stored in a format similar to json a.k.a BSON - binary JSON 
structure 
-- 
in a single mongodb deployment we can create more that 1 database 
1 database can contain one or more collections - this collections corresponds to a table in SQL databases
inside one collection one or more documents can be stored  -> corresponds to a record in SQL  (or data row in sql) 

inside one document there can be one or more fields - a field is a key:value pair where data will be stored as a data to the key 

each document is having a unique identifier called the ObjectId__ 


mongodb can be used in two ways i.e 
1) local use - mongodb compass
2) cloud use - mongodb atlas


30/04/2025
mongoDb operations

GET

1) show databases  - to list all the databases from connnections
2) use <database name> - to switch to a particular database
3) show collections - to show all the collections inside a particular database
4)db.createCollections - to create a new collection
 collections are equivalent to tables in mySql
 whereas the document in nosql are equivalent to records in SQL
now that we have set up our middleware we need to channelize the incoming requests which can be converted 
into logical operations  so inorder to do that we use/create routes.js file 

we create the routes using the router class which is predefined inside the express library 
const route = new express.Router()

firstly we are setting route for the register functionality 
since we are posting the data we use route.post( path , <controller_logic> ) instead of route.get() 

inorder for the server to use our routes we need to export it which can be done using 
module.exports = route

inside the index.js import the route from the routes file 

we have now created a path for the requests now we need the do the logic which is done using the controller part
so create a folder for the controllers and a userController.js file for now which handles the registration 

exports.registerController = (req,res) => {
  //TODO: logic 
} 

import userController inside the routes file at the top 
import userController = require('./controllers/userController') ;

inside the register route use the controller using the format... 
route.post('/register' ,userController.registerController) 

if we place the routes before parsing inside the index.js we would be handling the json data which would result in an error so the order must be followed speicifically i.e  cors(), express.json() for parsing , route  for 
chanelizing the request 

now we are passing the register details to the controller via thunderclient using a POST request (username, email , password) 

once the request is broken down and the data is received in the console we need to check whether the data existsinside the database and hence we are introducing ... ... MongoDB


MODULE 4  - MONGODB
--Database: 
 database is used to organize a collection of data that are stored and managed in such a way
 that it makes easy to retrieve update and manupulate data queries 

--database can be classified into 
1) SQL - Structured Query Language
2) NoSQL _ Not Only Structured Query Language 

sql 					nosql
-------				    ------------
- relational database              -  non relational , 
- table like format		   - need not be a table like structure ( eg: graphs , documents , column key:value)
- rigid schema (structure)         - not rigid and hence a flexible schema 
- suitable for financial and       - used in real time applications , 
  banking application or 
 for small amount of data 
- eg MYSqL , postgreSQL , SQlite   - eg: mongodb(document) ,redis, cassandra(column wise) , neo4j 


MONGO DB
In mongoDB data is stored in a format similar to json a.k.a BSON - binary JSON 
structure 
-- 
in a single mongodb deployment we can create more that 1 database 
1 database can contain one or more collections - this collections corresponds to a table in SQL databases
inside one collection one or more documents can be stored  -> corresponds to a record in SQL  (or data row in sql) 

inside one document there can be one or more fields - a field is a key:value pair where data will be stored as a data to the key 

each document is having a unique identifier called the ObjectId__ 


mongodb can be used in two ways i.e 
1) local use - mongodb compass
2) cloud use - mongodb atlas


30/04/2025
mongoDb operations

GET

1) show databases  - to list all the databases from connnections
2) use <database name> - to switch to a particular database
3) show collections - to show all the collections inside a particular database
4)db.createCollections - to create a new collection
 collections are equivalent to tables in mySql
 whereas the document in nosql are equivalent to records in SQL
  this can be created manually using in the create collection button in the atlas UI
5)


POST (data)

:NB : users in all of the example corresponds to collection- name in a database
10) insert
	insertOne(Object)
	we can only insert one object at a time with this method
    insertMany()
 to insert more that one document . this can be done by passing the argument as array of objects
  db.users.insertMany([ obj1, obj2 ...] )

11_ update
	- updateOne() - at a time s single document can be updated
	- updateMany() - update more than one item ar a time


13) drop collectiions ( delete the whole database)
 db.dropCollections() - to delete the entire database

14) to drop a specific collection name
    db.collectionName.drop() - to remove a collection


query based
--------------

-- operators are represented by $ symbol
 - greater than represented by $gte
 - less that represented by $lt
 - greater than or equal to represented by $gte
 - less than or equal to represented by $lte
 - equal to $eq
 - $inc - increment
 - $unset - delete a key

 Refer: Indexing - Sharding and Replication , horizontal and vertical scaling

Logical Operations
- and represented by   $and


POST (data)

:NB : users in all of the example corresponds to collection- name in a database
10) insert
	insertOne(Object)
	we can only insert one object at a time with this method
    insertMany()
 to insert more that one document . this can be done by passing the argument as array of objects
  db.users.insertMany([ obj1, obj2 ...] )

11_ update
	- updateOne() - at a time s single document can be updated
	- updateMany() - update more than one item ar a time


13) drop collectiions ( delete the whole database)
 db.dropCollections() - to delete the entire database

14) to drop a specific collection name
    db.collectionName.drop() - to remove a collection


query based
--------------

-- operators are represented by $ symbol
 - greater than represented by $gte
 - less that represented by $lt
 - greater than or equal to represented by $gte
 - less than or equal to represented by $lte
 - equal to $eq
 - $inc - increment
 - $unset - delete a key

 Refer: Indexing - Sharding and Replication , horizontal and vertical scaling

Logical Operations
- and represented by   $and
  or :   $or
- db.users.find( { key:{ $or:[{},{}] })

 
DELETE
-------

02/05/2025

Aggregation
------------
- It process one or more documents and returns a computed result
- group values from multiple documents


syntax
-------
$lookup {
    {
     from: <collection to join>,
     localField: <field from the input documents>,
     foreignField: <field from the document of the "from" collection >,
     as: <output array field>
    }
}



RECORD LOGS
---- ---- ---- 

we are experimenting with data aggregation and hence in the users collection 
we are creating two objects and one of the objects having a id: and a key poiniting to another user's object ID






END 02/05/2025

In case of an error retry creating a new project add new cluster
create a username and passoword and make sure to save this password as well

in the database url or connection  make sure to edit the cluster url and add the database in the connection string

add this to the .env file as well


14) create a cluster in mongodb atlas and paste the connection string in the .env file
15) connect the server with the database by conncting it with the new file created (database connection.js file
    - import dotenv  library in the index.js  - invoke config()  to load the environment variables (at the top)
    - create a connection file and invoke connect method in the mongoose library to connect with the database.
    -

16) create a model folder in case you have multiple files




05/05/2025
we use jsonwebtoken to generate the auth token for identifying the logged in username
JWT authentication

- sign token generation
- let token = jwt.sign({key:value}, secretkey)
   // please note the keys used above as that should be passed in the multer configuration 
   const multerConfig = multer({
	
   })

	
   If the file.mimeType == image/png or file.mimetype == image/jpg  we can set the callback to true
   else we can set false in the callback ( accept only jpg and jpeg) 


in the routes file add the multer middleware
multerConfig.array('uploadedImages',3)  
the uploadeImages key is passed along with the request


15/05/2025
Profile.jsx

we are using imagePreview state for showing the image preview in the upload form 

inroder to convert the file object into our system based url ( in the profile page ) 
we can use the   URL.createObjectURL(filename) method  

the url in this case would appear as a blob in the console

we are using an imagePreview state to conditionally render the uploaded image and a 
placeholder image as well 

we have added the input functionality to the + icon as well 
- since we are planning to upload more that 1 image we need a new state to handle all the 
uploaded images previews as well 

- we are conditionally rendering the + icon when we have uploaded exactly 3 images as 
we have set a backend limit on the multer 

-- add the reset functionality by setting the all the states with the initial value when we 
click the reset button 

-- we have created the submit functionality by validating all the fields and then submitting to the backend via a common APi (uploadBookApi) 

we also need to pass the token when we are calling th uploadBookApi 
so when the page loads we are checking in the session storage whether a token is 
present or not  and we need to pass it via the reqHeader

FormData class
the data from the frontend which is having uploaded content should be send in form
of formdata as the application/type . or else axios would return an error 

inorder to pass the data in the requestBody we need to append each key with its value::
since the uploadedImages are an array of image object we need to handle them separately 
this can be achieved with this snippet 

for (let key in bookDetails) {
         if(key != 'uploadedImg'){
            reqBody.append(key,bookDetails[key])
         }else{
          bookDetails.uploadedImg.forEach( item => reqBody.append("uploadedImg",item) )
         }
}


16/05/2025
in the profile.jsx we are passing the form data make sure that the multer and the passed name of the uplaoded images are the same  "uploadedImages" as per my  program 
Upon successful request we can see the bookdetails stored inside the books collections in our mongodb cloud


inorder to display the latest books in the home page we need to sort every book present in the mongodb sorted by _id in descending order and then a limit can be applied to show only a certain count of books
i.e const allBooks = await books.find().sort({_id:-1}).limit(4)


from the home page we need now the control towards the 'explore more' button i.e all-books route in react

in the book controller we need to add a new controller to get all the books 
i.e getAllBooKController

all the database books should be available only to the logged in user so we are passing a jwt token in the route or through the jwtMiddleware . and hence we also need to pass the authorization token via the request Header 


17/05/2025
/view-book/:id
in order to pass the parameters or use the parameters we can use the useParams hook in react

API to view a book (frontend) in the common Api  - ViewSingleBookApi
we are not passing any reqHeader or reqbody in this case 

we need to export the uploaded images folder in to cloud inorder to display the images as urls 
to do that we use the express.static 
now that we have set up our middleware we need to channelize the incoming requests which can be converted 
into logical operations  so inorder to do that we use/create routes.js file 

we create the routes using the router class which is predefined inside the express library 
const route = new express.Router()

firstly we are setting route for the register functionality 
since we are posting the data we use route.post( path , <controller_logic> ) instead of route.get() 

inorder for the server to use our routes we need to export it which can be done using 
module.exports = route

inside the index.js import the route from the routes file 

we have now created a path for the requests now we need the do the logic which is done using the controller part
so create a folder for the controllers and a userController.js file for now which handles the registration 

exports.registerController = (req,res) => {
  //TODO: logic 
} 

import userController inside the routes file at the top 
import userController = require('./controllers/userController') ;

inside the register route use the controller using the format... 
route.post('/register' ,userController.registerController) 

if we place the routes before parsing inside the index.js we would be handling the json data which would result in an error so the order must be followed speicifically i.e  cors(), express.json() for parsing , route  for 
chanelizing the request 

now we are passing the register details to the controller via thunderclient using a POST request (username, email , password) 

once the request is broken down and the data is received in the console we need to check whether the data existsinside the database and hence we are introducing ... ... MongoDB


MODULE 4  - MONGODB
--Database: 
 database is used to organize a collection of data that are stored and managed in such a way
 that it makes easy to retrieve update and manupulate data queries 

--database can be classified into 
1) SQL - Structured Query Language
2) NoSQL _ Not Only Structured Query Language 

sql 					nosql
-------				    ------------
- relational database              -  non relational , 
- table like format		   - need not be a table like structure ( eg: graphs , documents , column key:value)
- rigid schema (structure)         - not rigid and hence a flexible schema 
- suitable for financial and       - used in real time applications , 
  banking application or 
 for small amount of data 
- eg MYSqL , postgreSQL , SQlite   - eg: mongodb(document) ,redis, cassandra(column wise) , neo4j 


MONGO DB
In mongoDB data is stored in a format similar to json a.k.a BSON - binary JSON 
structure 
-- 
in a single mongodb deployment we can create more that 1 database 
1 database can contain one or more collections - this collections corresponds to a table in SQL databases
inside one collection one or more documents can be stored  -> corresponds to a record in SQL  (or data row in sql) 

inside one document there can be one or more fields - a field is a key:value pair where data will be stored as a data to the key 

each document is having a unique identifier called the ObjectId__ 


mongodb can be used in two ways i.e 
1) local use - mongodb compass
2) cloud use - mongodb atlas


30/04/2025
mongoDb operations

GET

1) show databases  - to list all the databases from connnections
2) use <database name> - to switch to a particular database
3) show collections - to show all the collections inside a particular database
4)db.createCollections - to create a new collection
 collections are equivalent to tables in mySql
 whereas the document in nosql are equivalent to records in SQL
  this can be created manually using in the create collection button in the atlas UI
5)


POST (data)

:NB : users in all of the example corresponds to collection- name in a database
10) insert
	insertOne(Object)
	we can only insert one object at a time with this method
    insertMany()
 to insert more that one document . this can be done by passing the argument as array of objects
  db.users.insertMany([ obj1, obj2 ...] )

11_ update
	- updateOne() - at a time s single document can be updated
	- updateMany() - update more than one item ar a time


we can add this new job to our allJobs state and pass it as a dependency in useEffect

next we need to handle the job search form we can handle this by saving the input search key into a
a state and passing this searchKey into the getAllJobs() api as a query parameter 
and hence we need to update the frontand api and backend controllers as well

added the job delete functionality by passing the mongodb object ID in the handledelete and inside the 
controller we can delete the job by findByIdandDelete

JOb applicants:
User side  (Careers.jsx)

similar to the admin side we need to perform the same feature inside the
careers page. 
implemented dynamic searching similar to the admin careers 


Created an applicationSchema for sending out the application by the candidate/Applicant
we need to handle the users resume so we would be needing the multer as well (will do it later)

first we need to check whether the users email combined with the job title already exists in the database

pdf multer creation
pdfMulter.js



22/05//2025 

when setting the files we need to set the e.target.files[0] to true 

when we try to clear the resume field in the state we get an error as the input is of type file 
which could be done by using document.getElementById('input')
modern browsers won't allow you to set value dirctly to a input type with  file type 


api to add the application 
we have set the apply-job in the backend so we need to use that in the commonApi


request to get all the application from the users in the admin frontend 

u

when viewing the resume we will only get a file we need to export the pdfUploads to a path in the server as
well like we did with the uploads


install recharts library in the frontend

to make the barcharts responsive with the parent  we need to use width and height 100%
indicate the bar
cx cy for placing it in the center


23/05/2025
today we are going to start with admin settings

we are using a new state for storing the admin details such as username , password , confirm password
and profile picture as well 
for the profile picture we are using a separate state preview,setPreview for showing the picture in the 
input field

we are storing the admin details in a state and the picture must be stored separately 

in the backend we are creating a separate controller for the admin and user as the admin doesn't have a
bio filed like for the users 

editAdminProfileController


since there are uploaded contents we need a form data to send the contents as well and we will 
have to use the multer configuration as well 
write the handleAdd and handleReset functions as well 

next we need the api to update the profile in the frontend (updateProfileApi) 

next in the backend we need a new controlle to edit the profile in the userController as well 
editadminProfileController

we can either perform the authentication in the frontend or backend its easier in the frontend 

inside the controller we could get a request where there is an image or no image 

Admin Sidebar
----------

Logout
---- 
we are doing client side logout 



26/05/2025

before we purchase a book we need to set it's status
so we need 2 controller inside the bookControlller first to find all the books brought by the user 
and also all the books available to the user (user uploaded book)
inside the route we need to add in the new 2 controller created just now

next create the api in the frontend allApis that conenct to the created Controller(s)

in the profile we need to call the the above api's when the page is loaded
whenever the bookstatus is true we need to call the api 

we can use the same or different useEffect hook to split the functions 
if the bookstatus or the purchase status becomes true we are calling the bookfetching Api 
and then it is stored to two different states that is userbooks , userBrought 
and based on the states we are conditionally rendering the array list 

bookstatus tab
inside this tab we need to set the dummy data with the api result and the book schema keys 
and as for the bookstatus images we need to set it based on the .status key in the book schema

similarly for the purchase tab we can use the same ui and logic as the bookstatus but the array on which 
we need to iterate should be userBrought

next we need to add in the function to delete a book from the frontend
we first add in a dummy book in the frontend
create  a controller to delete a book from the backend , exports.deleteUserBookController


Payment Gateway 
1)create two components in the pages for success and failure (inside the user folder) 
2) set the appropriate path inside the app.jsx with the help of the Route component
3) install the stripe.js in the frontend 
4) payment is inside the view book page
5) inroder to make payment with stripe we need to have an account in stripe 
6)


